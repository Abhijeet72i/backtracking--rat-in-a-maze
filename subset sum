#include <iostream>
#include <vector>
using namespace std;

void solve(int index, int arr[], int n, int target, vector<int>& subset, vector<vector<int>>& results) {
    if (target == 0) {
        results.push_back(subset);  // Found a valid subset
        return;
    }
    if (index >= n || target < 0) {
        return; // Out of bounds or target went negative
    }
    
    // Include the current element
    subset.push_back(arr[index]);
    solve(index + 1, arr, n, target - arr[index], subset, results);
    
    // Backtrack after including the element
    subset.pop_back();
    
    // Exclude the current element
    solve(index + 1, arr, n, target, subset, results);
}

int main() {
    int n, target;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    cout << "Enter the target sum: ";
    cin >> target;

    vector<vector<int>> results;
    vector<int> subset;

    solve(0, arr, n, target, subset, results);

    if (!results.empty()) {
        cout << "Subsets found:\n";
        for (const auto& s : results) {
            cout << "{ ";
            for (int num : s) {
                cout << num << " ";
            }
            cout << "}\n";
        }
    } else {
        cout << "No subset found\n";
    }

    return 0;
}
