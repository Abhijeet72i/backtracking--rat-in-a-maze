#include <iostream>
#include <vector>
using namespace std;

void addSolution(const vector<vector<int>>& board, vector<vector<int>>& ans, int n) {
    vector<int> temp;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            temp.push_back(board[i][j]);
        }
    }
    ans.push_back(temp);
}

bool isSafe(int row, int col, const vector<vector<int>>& board, int n) {
    // Check the upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) return false;
    }
    // Check the left side
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) return false;
    }
    // Check the lower diagonal on left side
    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j] == 1) return false;
    }
    return true;
}

void solve(int col, vector<vector<int>>& board, vector<vector<int>>& ans, int n) {
    if (col == n) {
        addSolution(board, ans, n);
        return;
    }
    for (int row = 0; row < n; row++) {
        if (isSafe(row, col, board, n)) {
            board[row][col] = 1; // Place queen
            solve(col + 1, board, ans, n); // Recur to place rest of the queens
            board[row][col] = 0; // Backtrack
        }
    }
}

int main() {
    int n;
    cin >> n;
    vector<vector<int>> board(n, vector<int>(n, 0)); // Initialize the board
    vector<vector<int>> ans;
    solve(0, board, ans, n);

    // Print all the solutions
    for (const auto& solution : ans) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << solution[i * n + j] << " ";
            }
            cout << endl;
        }
        cout << endl; // Separate different solutions
    }

    return 0;
}
